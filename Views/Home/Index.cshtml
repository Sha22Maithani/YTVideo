@{
    ViewData["Title"] = "YShorts - YouTube Video Processing";
}

<div class="container">
    <div class="row mb-4">
        <div class="col-12 text-center">
            <h1 class="display-4 fw-bold">Create <span style="color: #FF0000;">YouTube Shorts</span> Easily</h1>
            <p class="lead">Upload your long-form video, get transcription, and create engaging short videos.</p>
        </div>
    </div>

    <div class="row">
        <!-- Left Column: Video Processing Form -->
        <div class="col-lg-7">
            <div class="card shadow-sm border-0 rounded-3 mb-4">
                <div class="card-header bg-dark text-white py-3">
                    <h4 class="mb-0"><i class="fas fa-video me-2"></i>YouTube Video Processor</h4>
                </div>
                <div class="card-body p-4">
                    <!-- Processing Type Tabs -->
                    <ul class="nav nav-tabs mb-4" id="processingTabs" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="transcribe-tab" data-bs-toggle="tab" data-bs-target="#transcribe" 
                                    type="button" role="tab" aria-selected="true">
                                <i class="fas fa-microphone-alt me-1"></i>Transcribe
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="best-moments-tab" data-bs-toggle="tab" data-bs-target="#best-moments" 
                                    type="button" role="tab" aria-selected="false">
                                <i class="fas fa-star me-1"></i>Best Moments
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="shorts-tab" data-bs-toggle="tab" data-bs-target="#shorts" 
                                    type="button" role="tab" aria-selected="false">
                                <i class="fas fa-cut me-1"></i>Create Shorts
                            </button>
                        </li>
                    </ul>
                    
                    <!-- Tab Content -->
                    <div class="tab-content" id="processingTabsContent">
                        <!-- Transcription Tab -->
                        <div class="tab-pane fade show active" id="transcribe" role="tabpanel" aria-labelledby="transcribe-tab">
                            <form id="transcriptionForm">
                                <div class="form-group mb-3">
                                    <label for="youtubeUrl" class="form-label">Enter YouTube Video URL:</label>
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fab fa-youtube"></i></span>
                                        <input type="url" class="form-control" id="youtubeUrl" 
                                               placeholder="https://www.youtube.com/watch?v=..." required>
                                    </div>
                                    <div class="form-text">Paste the URL of the YouTube video you want to transcribe</div>
                                </div>
                                <div class="d-grid">
                                    <button type="submit" class="btn btn-youtube" id="transcribeBtn">
                                        <span id="btnSpinner" class="spinner-border spinner-border-sm d-none me-2" role="status" aria-hidden="true"></span>
                                        Transcribe Video
                                    </button>
                                </div>
                            </form>
                        </div>
                        
                        <!-- Best Moments Tab -->
                        <div class="tab-pane fade" id="best-moments" role="tabpanel" aria-labelledby="best-moments-tab">
                            <form id="bestMomentsForm">
                                <div class="form-group mb-3">
                                    <label for="bestMomentsYoutubeUrl" class="form-label">Enter YouTube Video URL:</label>
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fab fa-youtube"></i></span>
                                        <input type="url" class="form-control" id="bestMomentsYoutubeUrl" 
                                               placeholder="https://www.youtube.com/watch?v=..." required>
                                    </div>
                                    <div class="form-text">Paste the URL of the YouTube video to extract best moments</div>
                                </div>
                                <div class="d-grid">
                                    <button type="submit" class="btn btn-youtube" id="findBestMomentsBtn">
                                        <span id="bestMomentsSpinner" class="spinner-border spinner-border-sm d-none me-2" role="status" aria-hidden="true"></span>
                                        Find Best Moments
                                    </button>
                                </div>
                            </form>
                        </div>
                        
                        <!-- Create Shorts Tab -->
                        <div class="tab-pane fade" id="shorts" role="tabpanel" aria-labelledby="shorts-tab">
                            <form id="shortsForm">
                                <div class="form-group mb-3">
                                    <label for="shortsYoutubeUrl" class="form-label">Enter YouTube Video URL:</label>
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fab fa-youtube"></i></span>
                                        <input type="url" class="form-control" id="shortsYoutubeUrl" 
                                               placeholder="https://www.youtube.com/watch?v=..." required>
                                    </div>
                                    <div class="form-text">Paste the URL of the YouTube video to create shorts from</div>
                                </div>
                                
                                <div class="mb-3">
                                    <label class="form-label">Select frame size:</label>
                                    <div class="d-flex justify-content-between">
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" name="aspectRatio" id="landscape" value="0" checked>
                                            <label class="form-check-label" for="landscape">
                                                <i class="fas fa-tv me-1"></i> Landscape (16:9)
                                            </label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" name="aspectRatio" id="portrait" value="1">
                                            <label class="form-check-label" for="portrait">
                                                <i class="fas fa-mobile-alt me-1"></i> Portrait (9:16)
                                            </label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" name="aspectRatio" id="square" value="2">
                                            <label class="form-check-label" for="square">
                                                <i class="fas fa-square me-1"></i> Square (1:1)
                                            </label>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="alert alert-info">
                                    <div class="d-flex align-items-center">
                                        <i class="fas fa-info-circle fs-4 me-3"></i>
                                        <div>
                                            <p class="mb-1"><strong>Two-step processing:</strong></p>
                                            <p class="mb-0">This will first show you previews of the best moments. Then you can select which ones to convert into actual video clips.</p>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="d-grid">
                                    <button type="submit" class="btn btn-youtube" id="createShortsBtn">
                                        <span id="shortsSpinner" class="spinner-border spinner-border-sm d-none me-2" role="status" aria-hidden="true"></span>
                                        <i class="fas fa-search me-1"></i> Find Best Moments for Shorts
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Result Container -->
            <div class="card shadow-sm border-0 rounded-3 d-none" id="resultCard">
                <div class="card-header bg-success text-white py-3">
                    <h4 class="mb-0"><i class="fas fa-check-circle me-2"></i>Processing Result</h4>
                </div>
                <div class="card-body p-4">
                    <div class="alert alert-danger d-none" id="errorMessage"></div>
                    
                    <div id="transcriptionResultContainer" class="d-none">
                        <h5>Transcription:</h5>
                        <div class="border p-3 bg-light rounded mb-3">
                            <pre id="transcriptionResult" class="mb-0" style="white-space: pre-wrap;"></pre>
                        </div>
                        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                            <button class="btn btn-sm btn-outline-secondary" id="copyTranscriptionBtn">
                                <i class="fas fa-copy me-1"></i>Copy to Clipboard
                            </button>
                            <button class="btn btn-sm btn-outline-primary" id="downloadTranscriptionBtn">
                                <i class="fas fa-download me-1"></i>Download
                            </button>
                        </div>
                    </div>
                    
                    <div id="bestMomentsResultContainer" class="d-none">
                        <h5>Best Moments:</h5>
                        <div class="list-group mb-3" id="bestMomentsList">
                            <!-- Best moments will be dynamically added here -->
                        </div>
                        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                            <button class="btn btn-sm btn-outline-secondary" id="copyBestMomentsBtn">
                                <i class="fas fa-copy me-1"></i>Copy to Clipboard
                            </button>
                            <button class="btn btn-sm btn-outline-primary" id="downloadBestMomentsBtn">
                                <i class="fas fa-download me-1"></i>Download
                            </button>
                        </div>
                    </div>
                    
                    <div id="shortsResultContainer" class="d-none">
                        <h5>Best Moments for Shorts:</h5>
                        <div class="alert alert-success mb-3">
                            <div class="d-flex align-items-center">
                                <i class="fas fa-check-circle fs-4 me-3"></i>
                                <div>
                                    <p class="mb-1"><strong>Best Moments Found!</strong></p>
                                    <p class="mb-0">Select moments you want to convert into shorts, then click "Generate Selected Shorts". Or click "Create Clip" on any moment to directly create a single clip.</p>
                                </div>
                            </div>
                        </div>
                        <div id="shortsResults" class="list-group mb-3">
                            <!-- Short clips will be dynamically added here -->
                        </div>
                        
                        <!-- Generate Selected Shorts Button -->
                        <div class="d-grid gap-2 mt-4">
                            <button id="generateSelectedShortsBtn" class="btn btn-primary" disabled>
                                <span id="generateShortsSpinner" class="spinner-border spinner-border-sm d-none me-2" role="status" aria-hidden="true"></span>
                                <i class="fas fa-film me-1"></i> Generate Selected Shorts
                            </button>
                        </div>
                        
                        <!-- Generated Shorts Container -->
                        <div id="generatedShortsContainer" class="mt-4 d-none">
                            <h5>Generated Videos:</h5>
                            <div class="alert alert-success mb-3">
                                <div class="d-flex align-items-center">
                                    <i class="fas fa-check-circle fs-4 me-3"></i>
                                    <div>
                                        <p class="mb-1"><strong>Videos Created Successfully!</strong></p>
                                        <p class="mb-0">Your shorts and clips are ready to preview and download.</p>
                                    </div>
                                </div>
                            </div>
                            <div id="generatedShortsList" class="list-group mb-3">
                                <!-- Generated short clips will be dynamically added here -->
                            </div>
                        </div>
                        
                        <div class="d-flex justify-content-between align-items-center mt-4 mb-2">
                            <h5 class="mb-0">Transcription and Best Moments</h5>
                            <button class="btn btn-sm btn-outline-secondary" type="button" data-bs-toggle="collapse" data-bs-target="#additionalInfo">
                                <i class="fas fa-chevron-down me-1"></i> Show Details
                            </button>
                        </div>
                        <div class="collapse" id="additionalInfo">
                            <div class="card card-body mb-3">
                                <h6>Best Moments:</h6>
                                <div class="list-group mb-3" id="bestMomentsList">
                                    <!-- Best moments will be dynamically added here -->
                                </div>
                                
                                <h6 class="mt-3">Full Transcription:</h6>
                                <div class="border p-3 bg-light rounded">
                                    <pre id="shortsTranscriptionResult" class="mb-0" style="white-space: pre-wrap;"></pre>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Right Column: Features and Information -->
        <div class="col-lg-5">
            <div class="card shadow-sm border-0 rounded-3 mb-4">
                <div class="card-header bg-dark text-white py-3">
                    <h4 class="mb-0"><i class="fas fa-lightbulb me-2"></i>Why Use YShorts?</h4>
                </div>
                <div class="card-body p-4">
                    <div class="d-flex mb-3">
                        <div class="flex-shrink-0">
                            <i class="fas fa-microphone-alt text-danger fa-2x"></i>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <h5>Accurate Transcription</h5>
                            <p>Get high-quality transcriptions powered by AssemblyAI's advanced speech recognition technology.</p>
                        </div>
                    </div>
                    
                    <div class="d-flex mb-3">
                        <div class="flex-shrink-0">
                            <i class="fas fa-cut text-danger fa-2x"></i>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <h5>Smart Video Clips</h5>
                            <p>Automatically create engaging shorts from your long-form content using AI-powered content analysis.</p>
                        </div>
                    </div>
                    
                    <div class="d-flex mb-3">
                        <div class="flex-shrink-0">
                            <i class="fas fa-bolt text-danger fa-2x"></i>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <h5>Fast Processing</h5>
                            <p>Quick turnaround times even for longer videos, so you can start using your content right away.</p>
                        </div>
                    </div>
                    
                    <div class="d-flex">
                        <div class="flex-shrink-0">
                            <i class="fas fa-share-alt text-danger fa-2x"></i>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <h5>Easy Sharing</h5>
                            <p>Download your shorts and transcriptions for immediate use on social media platforms.</p>
                        </div>
                    </div>
                    
                    <div class="d-flex mb-3">
                        <div class="flex-shrink-0">
                            <i class="fas fa-star text-danger fa-2x"></i>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <h5>Best Moments Detection</h5>
                            <p>Automatically identify the most interesting or significant moments from your videos using Gemini AI.</p>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="card shadow-sm border-0 rounded-3">
                <div class="card-header bg-dark text-white py-3">
                    <h4 class="mb-0"><i class="fas fa-question-circle me-2"></i>How It Works</h4>
                </div>
                <div class="card-body p-4">
                    <ol class="list-group list-group-numbered mb-0">
                        <li class="list-group-item border-0 d-flex">
                            <div class="ms-2">
                                <div class="fw-bold">Paste your YouTube URL</div>
                                Enter the URL of any YouTube video you want to process
                            </div>
                        </li>
                        <li class="list-group-item border-0 d-flex">
                            <div class="ms-2">
                                <div class="fw-bold">Choose your processing option</div>
                                Select transcription or shorts creation
                            </div>
                        </li>
                        <li class="list-group-item border-0 d-flex">
                            <div class="ms-2">
                                <div class="fw-bold">Get results quickly</div>
                                Our system processes your video and delivers results in minutes
                            </div>
                        </li>
                        <li class="list-group-item border-0 d-flex">
                            <div class="ms-2">
                                <div class="fw-bold">Download and share</div>
                                Use the generated content for your social media strategy
                            </div>
                        </li>
                    </ol>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Transcription Form Submit
        document.getElementById('transcriptionForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const youtubeUrl = document.getElementById('youtubeUrl').value;
            const transcribeBtn = document.getElementById('transcribeBtn');
            const btnSpinner = document.getElementById('btnSpinner');
            const errorMessage = document.getElementById('errorMessage');
            const resultCard = document.getElementById('resultCard');
            const transcriptionResultContainer = document.getElementById('transcriptionResultContainer');
            const shortsResultContainer = document.getElementById('shortsResultContainer');
            const bestMomentsResultContainer = document.getElementById('bestMomentsResultContainer');
            const transcriptionResult = document.getElementById('transcriptionResult');
            
            // Reset UI
            errorMessage.classList.add('d-none');
            errorMessage.textContent = '';
            
            // Show loading state
            transcribeBtn.disabled = true;
            btnSpinner.classList.remove('d-none');
            
            try {
                const response = await fetch('/api/transcription/transcribe', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ youtubeUrl })
                });
                
                const data = await response.json();
                
                if (!response.ok || !data.success) {
                    throw new Error(data.errorMessage || 'Failed to transcribe video');
                }
                
                // Display result
                transcriptionResult.textContent = data.text;
                resultCard.classList.remove('d-none');
                transcriptionResultContainer.classList.remove('d-none');
                shortsResultContainer.classList.add('d-none');
                bestMomentsResultContainer.classList.add('d-none');
                
                // Scroll to results
                resultCard.scrollIntoView({ behavior: 'smooth' });
                
            } catch (error) {
                // Show error
                errorMessage.textContent = error.message;
                errorMessage.classList.remove('d-none');
                resultCard.classList.remove('d-none');
                
            } finally {
                // Reset loading state
                transcribeBtn.disabled = false;
                btnSpinner.classList.add('d-none');
            }
        });
        
        // Best Moments Form Submit
        document.getElementById('bestMomentsForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const youtubeUrl = document.getElementById('bestMomentsYoutubeUrl').value;
            const findBestMomentsBtn = document.getElementById('findBestMomentsBtn');
            const bestMomentsSpinner = document.getElementById('bestMomentsSpinner');
            const errorMessage = document.getElementById('errorMessage');
            const resultCard = document.getElementById('resultCard');
            const transcriptionResultContainer = document.getElementById('transcriptionResultContainer');
            const shortsResultContainer = document.getElementById('shortsResultContainer');
            const bestMomentsResultContainer = document.getElementById('bestMomentsResultContainer');
            const bestMomentsList = document.getElementById('bestMomentsList');
            
            // Reset UI
            errorMessage.classList.add('d-none');
            errorMessage.textContent = '';
            bestMomentsList.innerHTML = '';
            
            // Show loading state
            findBestMomentsBtn.disabled = true;
            bestMomentsSpinner.classList.remove('d-none');
            
            try {
                const response = await fetch('/api/transcription/transcribe-and-extract', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ youtubeUrl })
                });
                
                const data = await response.json();
                
                if (!response.ok || !data.success) {
                    throw new Error(data.errorMessage || 'Failed to extract best moments');
                }
                
                // Display results
                bestMomentsList.innerHTML = data.bestMoments.map((moment, index) => `
                    <div class="list-group-item list-group-item-action">
                        <div class="d-flex w-100 justify-content-between mb-2">
                            <h6 class="mb-1">Best Moment #${index + 1}</h6>
                            <small class="text-muted">${moment.startTimestamp} - ${moment.endTimestamp}</small>
                        </div>
                        <p class="mb-1">${moment.content}</p>
                        <small class="text-muted"><strong>Why it's great:</strong> ${moment.reason}</small>
                    </div>
                `).join('');
                
                // Display result
                resultCard.classList.remove('d-none');
                transcriptionResultContainer.classList.add('d-none');
                shortsResultContainer.classList.add('d-none');
                bestMomentsResultContainer.classList.remove('d-none');
                
                // Scroll to results
                resultCard.scrollIntoView({ behavior: 'smooth' });
                
            } catch (error) {
                // Show error
                errorMessage.textContent = error.message || "An error occurred while extracting best moments.";
                errorMessage.classList.remove('d-none');
                resultCard.classList.remove('d-none');
                
            } finally {
                // Reset loading state
                findBestMomentsBtn.disabled = false;
                bestMomentsSpinner.classList.add('d-none');
            }
        });
        
        // Shorts Form Submit
        document.getElementById('shortsForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const youtubeUrl = document.getElementById('shortsYoutubeUrl').value;
            const aspectRatio = document.querySelector('input[name="aspectRatio"]:checked').value;
            const createShortsBtn = document.getElementById('createShortsBtn');
            const shortsSpinner = document.getElementById('shortsSpinner');
            const errorMessage = document.getElementById('errorMessage');
            const resultCard = document.getElementById('resultCard');
            const transcriptionResultContainer = document.getElementById('transcriptionResultContainer');
            const shortsResultContainer = document.getElementById('shortsResultContainer');
            const bestMomentsResultContainer = document.getElementById('bestMomentsResultContainer');
            const shortsResults = document.getElementById('shortsResults');
            const generateSelectedShortsBtn = document.getElementById('generateSelectedShortsBtn');
            const generatedShortsContainer = document.getElementById('generatedShortsContainer');
            
            // Reset UI
            errorMessage.classList.add('d-none');
            errorMessage.textContent = '';
            shortsResults.innerHTML = '';
            generatedShortsContainer.classList.add('d-none');
            
            // Show loading state
            createShortsBtn.disabled = true;
            shortsSpinner.classList.remove('d-none');
            
            try {
                // First, transcribe and find best moments
                const transcribeResponse = await fetch('/api/transcription/transcribe-and-extract', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ youtubeUrl })
                });
                
                const transcribeData = await transcribeResponse.json();
                
                if (!transcribeResponse.ok || !transcribeData.success) {
                    throw new Error(transcribeData.errorMessage || 'Failed to transcribe video and extract best moments');
                }
                
                // Then, create short previews with the specified aspect ratio
                const response = await fetch('/api/shorts/create-with-aspect', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ 
                        youtubeUrl: youtubeUrl,
                        bestMoments: transcribeData.bestMoments,
                        aspectRatio: parseInt(aspectRatio)
                    })
                });
                
                const data = await response.json();
                
                if (!response.ok || !data.success) {
                    throw new Error(data.errorMessage || 'Failed to generate shorts previews');
                }
                
                // Store the source video path for later use
                window.sourceVideoPath = data.sourceVideoPath;
                
                // Store the shorts data for later use
                window.shortsData = data;
                
                // Display results with checkboxes for selection
                shortsResults.innerHTML = data.shorts.map(short => `
                    <div class="list-group-item">
                        <div class="form-check">
                            <input class="form-check-input short-selection" type="checkbox" value="${short.id}" id="short-check-${short.id}" data-short-id="${short.id}">
                            <label class="form-check-label" for="short-check-${short.id}">
                                <div class="d-flex w-100 justify-content-between align-items-center">
                                    <div class="d-flex align-items-center">
                                        <div class="me-3 text-center">
                                            <span class="badge bg-secondary mb-1">Moment #${short.id}</span><br>
                                            <small class="text-muted">${short.duration}</small>
                                        </div>
                                        <div>
                                            <h6 class="mb-1">${short.title}</h6>
                                            <p class="mb-1 small text-truncate" style="max-width: 400px;">
                                                ${short.additionalProperties?.content || ""}
                                            </p>
                                        </div>
                                    </div>
                                    <div>
                                        <button class="btn btn-sm btn-outline-success me-2 preview-moment-btn" 
                                                data-id="${short.id}" 
                                                data-start="${short.additionalProperties?.StartTimeSeconds || 0}" 
                                                data-duration="${short.additionalProperties?.EndTimeSeconds - short.additionalProperties?.StartTimeSeconds || 30}"
                                                data-video-path="${window.sourceVideoPath}">
                                            <i class="fas fa-play me-1"></i>Preview
                                        </button>
                                        <button class="btn btn-sm btn-outline-primary create-clip-btn" 
                                                data-id="${short.id}" 
                                                data-start="${short.additionalProperties?.StartTimeSeconds || 0}" 
                                                data-end="${short.additionalProperties?.EndTimeSeconds || 30}"
                                                data-video-path="${window.sourceVideoPath}"
                                                data-title="${short.title}">
                                            <i class="fas fa-scissors me-1"></i>Create Clip
                                        </button>
                                    </div>
                                </div>
                            </label>
                        </div>
                        <div id="preview-container-${short.id}" class="video-container mt-3" style="display: none;">
                            <div class="ratio ratio-16x9">
                                <video id="preview-video-${short.id}" controls></video>
                            </div>
                        </div>
                    </div>
                `).join('');
                
                // Enable the Generate Selected Shorts button when at least one short is selected
                const shortCheckboxes = document.querySelectorAll('.short-selection');
                shortCheckboxes.forEach(checkbox => {
                    checkbox.addEventListener('change', function() {
                        const selectedCount = document.querySelectorAll('.short-selection:checked').length;
                        generateSelectedShortsBtn.disabled = selectedCount === 0;
                        generateSelectedShortsBtn.textContent = selectedCount > 0 ? 
                            `Generate ${selectedCount} Selected Shorts` : 
                            'Generate Selected Shorts';
                    });
                });
                
                // Display result
                resultCard.classList.remove('d-none');
                transcriptionResultContainer.classList.add('d-none');
                shortsResultContainer.classList.remove('d-none');
                bestMomentsResultContainer.classList.add('d-none');
                
                // Scroll to results
                resultCard.scrollIntoView({ behavior: 'smooth' });
                
            } catch (error) {
                // Show error
                errorMessage.textContent = error.message || "An error occurred while generating shorts previews.";
                errorMessage.classList.remove('d-none');
                resultCard.classList.remove('d-none');
                
            } finally {
                // Reset loading state
                createShortsBtn.disabled = false;
                shortsSpinner.classList.add('d-none');
            }
        });
        
        // Generate Selected Shorts Button Click
        document.getElementById('generateSelectedShortsBtn').addEventListener('click', async function() {
            const generateSelectedShortsBtn = document.getElementById('generateSelectedShortsBtn');
            const generateShortsSpinner = document.getElementById('generateShortsSpinner');
            const errorMessage = document.getElementById('errorMessage');
            const generatedShortsContainer = document.getElementById('generatedShortsContainer');
            const generatedShortsList = document.getElementById('generatedShortsList');
            
            // Get selected shorts
            const selectedShortIds = Array.from(document.querySelectorAll('.short-selection:checked'))
                .map(checkbox => parseInt(checkbox.value));
            
            if (selectedShortIds.length === 0) {
                alert('Please select at least one short to generate.');
                return;
            }
            
            // Get all shorts data
            const allShorts = [];
            document.querySelectorAll('.short-selection').forEach(checkbox => {
                const shortId = parseInt(checkbox.getAttribute('data-short-id'));
                if (selectedShortIds.includes(shortId)) {
                    // Find the corresponding short data from the previous response
                    const shortData = window.shortsData.shorts.find(s => s.id === shortId);
                    if (shortData) {
                        // Create a copy of the short data with explicit start time and duration
                        const shortClip = {
                            id: shortData.id,
                            title: shortData.title,
                            duration: shortData.duration,
                            thumbnailUrl: shortData.thumbnailUrl,
                            downloadUrl: shortData.downloadUrl,
                            previewUrl: shortData.previewUrl,
                            filePath: shortData.filePath,
                            fileName: shortData.fileName,
                            aspectRatio: shortData.aspectRatio,
                            // Include these properties with proper capitalization to match C# model
                            StartTimeSeconds: parseFloat(document.querySelector(`.preview-moment-btn[data-id="${shortId}"]`).getAttribute('data-start')),
                            EndTimeSeconds: parseFloat(document.querySelector(`.preview-moment-btn[data-id="${shortId}"]`).getAttribute('data-start')) + 
                                           parseFloat(document.querySelector(`.preview-moment-btn[data-id="${shortId}"]`).getAttribute('data-duration')),
                            Content: shortData.title.split(': ')[1]
                        };
                        allShorts.push(shortClip);
                    }
                }
            });
            
            // Show loading state
            generateSelectedShortsBtn.disabled = true;
            generateShortsSpinner.classList.remove('d-none');
            
            try {
                console.log("Sending request to generate shorts:", {
                    sourceVideoPath: window.sourceVideoPath,
                    selectedShorts: allShorts
                });
                
                const response = await fetch('/api/shorts/generate-selected', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ 
                        sourceVideoPath: window.sourceVideoPath,
                        selectedShorts: allShorts
                    })
                });
                
                const data = await response.json();
                console.log("Response from server:", data);
                
                if (!response.ok || !data.success) {
                    throw new Error(data.errorMessage || 'Failed to generate selected shorts');
                }
                
                // Display generated shorts
                generatedShortsList.innerHTML = data.shorts.map(short => `
                    <div class="list-group-item list-group-item-action">
                        <div class="d-flex w-100 justify-content-between align-items-center mb-3">
                            <div class="d-flex align-items-center">
                                <img src="${short.thumbnailUrl}" class="img-thumbnail me-3" style="width: 80px; height: 80px;">
                                <div>
                                    <h6 class="mb-1">Short #${short.id}: ${short.title}</h6>
                                    <p class="mb-1"><small>Duration: ${short.duration}</small></p>
                                </div>
                            </div>
                            <div>
                                <button class="btn btn-sm btn-outline-success me-2 play-video-btn" data-id="${short.id}" data-url="${short.previewUrl}">
                                    <i class="fas fa-play me-1"></i>Play
                                </button>
                                <a href="/api/shorts/preview/${short.fileName}" class="btn btn-sm btn-outline-success me-2" target="_blank">
                                    <i class="fas fa-external-link-alt me-1"></i>Preview
                                </a>
                                <a href="${short.downloadUrl}" class="btn btn-sm btn-outline-primary me-2" download>
                                    <i class="fas fa-download me-1"></i>Download
                                </a>
                            </div>
                        </div>
                        <div id="video-container-${short.id}" class="video-container mt-3" style="display: none;">
                            <div class="ratio ratio-16x9">
                                <video id="video-${short.id}" controls>
                                    <source src="${short.previewUrl}" type="video/mp4">
                                    Your browser does not support the video tag.
                                </video>
                            </div>
                        </div>
                    </div>
                `).join('');
                
                // Show the output directory location
                if (data.outputDirectory) {
                    const directoryInfo = document.createElement('div');
                    directoryInfo.className = 'alert alert-info mt-3';
                    directoryInfo.innerHTML = `
                        <div class="d-flex align-items-center">
                            <i class="fas fa-folder-open me-3 fs-4"></i>
                            <div>
                                <p class="mb-1"><strong>Output Directory</strong></p>
                                <p class="mb-0">Your shorts have been saved to: <code>${data.outputDirectory}</code></p>
                            </div>
                        </div>
                    `;
                    generatedShortsList.appendChild(directoryInfo);
                }
                
                // Show generated shorts container
                generatedShortsContainer.classList.remove('d-none');
                
                // Scroll to generated shorts
                generatedShortsContainer.scrollIntoView({ behavior: 'smooth' });
                
            } catch (error) {
                // Show error
                errorMessage.textContent = error.message || "An error occurred while generating selected shorts.";
                errorMessage.classList.remove('d-none');
                
            } finally {
                // Reset loading state
                generateSelectedShortsBtn.disabled = false;
                generateShortsSpinner.classList.add('d-none');
            }
        });
        
        // Copy Transcription to Clipboard
        document.getElementById('copyTranscriptionBtn').addEventListener('click', function() {
            const text = document.getElementById('transcriptionResult').textContent;
            navigator.clipboard.writeText(text).then(() => {
                const originalText = this.innerHTML;
                this.innerHTML = '<i class="fas fa-check me-1"></i>Copied!';
                setTimeout(() => {
                    this.innerHTML = originalText;
                }, 2000);
            });
        });
        
        // Download Transcription
        document.getElementById('downloadTranscriptionBtn').addEventListener('click', function() {
            const text = document.getElementById('transcriptionResult').textContent;
            const blob = new Blob([text], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'transcription.txt';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        });
        
        // Copy Best Moments to Clipboard
        document.getElementById('copyBestMomentsBtn').addEventListener('click', function() {
            const moments = Array.from(document.querySelectorAll('#bestMomentsList .list-group-item'))
                .map((item, index) => {
                    const title = item.querySelector('h6').textContent;
                    const timestamp = item.querySelector('small.text-muted').textContent;
                    const content = item.querySelector('p').textContent;
                    const reason = item.querySelector('small.text-muted:last-child').textContent;
                    return `${title}\n${timestamp}\n${content}\n${reason}\n`;
                }).join('\n');
                
            navigator.clipboard.writeText(moments).then(() => {
                const originalText = this.innerHTML;
                this.innerHTML = '<i class="fas fa-check me-1"></i>Copied!';
                setTimeout(() => {
                    this.innerHTML = originalText;
                }, 2000);
            });
        });
        
        // Download Best Moments
        document.getElementById('downloadBestMomentsBtn').addEventListener('click', function() {
            const moments = Array.from(document.querySelectorAll('#bestMomentsList .list-group-item'))
                .map((item, index) => {
                    const title = item.querySelector('h6').textContent;
                    const timestamp = item.querySelector('small.text-muted').textContent;
                    const content = item.querySelector('p').textContent;
                    const reason = item.querySelector('small.text-muted:last-child').textContent;
                    return `${title}\n${timestamp}\n${content}\n${reason}\n`;
                }).join('\n');
                
            const blob = new Blob([moments], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'best_moments.txt';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        });
        
        // Handle video play buttons
        document.addEventListener('click', function(e) {
            const playBtn = e.target.closest('.play-video-btn');
            if (playBtn) {
                e.preventDefault();
                const videoId = playBtn.getAttribute('data-id');
                const videoContainer = document.getElementById(`video-container-${videoId}`);
                const video = document.getElementById(`video-${videoId}`);
                
                // Toggle video container visibility
                if (videoContainer.style.display === 'none') {
                    // Hide any other open videos first
                    document.querySelectorAll('.video-container').forEach(container => {
                        if (container !== videoContainer && container.style.display !== 'none') {
                            container.style.display = 'none';
                            const otherVideo = container.querySelector('video');
                            if (otherVideo) {
                                otherVideo.pause();
                                otherVideo.currentTime = 0;
                            }
                        }
                    });
                    
                    // Show and play this video
                    videoContainer.style.display = 'block';
                    if (video) {
                        video.play().catch(err => console.log('Error playing video:', err));
                    }
                } else {
                    // Hide and pause the video
                    videoContainer.style.display = 'none';
                    if (video) {
                        video.pause();
                        video.currentTime = 0;
                    }
                }
            }
        });
        
        // Handle preview moment buttons
        document.addEventListener('click', function(e) {
            const previewBtn = e.target.closest('.preview-moment-btn');
            if (previewBtn) {
                e.preventDefault();
                const momentId = previewBtn.getAttribute('data-id');
                const startTime = parseFloat(previewBtn.getAttribute('data-start'));
                const duration = parseFloat(previewBtn.getAttribute('data-duration'));
                const videoPath = previewBtn.getAttribute('data-video-path');
                
                const previewContainer = document.getElementById(`preview-container-${momentId}`);
                const previewVideo = document.getElementById(`preview-video-${momentId}`);
                
                // Toggle preview container visibility
                if (previewContainer.style.display === 'none') {
                    // Show loading indicator on the button
                    const originalBtnText = previewBtn.innerHTML;
                    previewBtn.disabled = true;
                    previewBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>Loading...';
                    
                    // Hide any other open videos first
                    document.querySelectorAll('.video-container').forEach(container => {
                        if (container !== previewContainer && container.style.display !== 'none') {
                            container.style.display = 'none';
                            const otherVideo = container.querySelector('video');
                            if (otherVideo) {
                                otherVideo.pause();
                                otherVideo.currentTime = 0;
                            }
                        }
                    });
                    
                    // Set up video source - this will create a preview segment on the server
                    const source = document.createElement('source');
                    source.src = `/api/shorts/preview-moment?videoPath=${encodeURIComponent(videoPath)}&startTime=${startTime}&duration=${duration}`;
                    source.type = 'video/mp4';
                    
                    // Clear any existing sources
                    while (previewVideo.firstChild) {
                        previewVideo.removeChild(previewVideo.firstChild);
                    }
                    
                    previewVideo.appendChild(source);
                    
                    // When the video is loaded and ready to play
                    previewVideo.addEventListener('canplay', function onCanPlay() {
                        // Remove the event listener to avoid multiple calls
                        previewVideo.removeEventListener('canplay', onCanPlay);
                        
                        // Show the preview container
                        previewContainer.style.display = 'block';
                        
                        // Play the video
                        previewVideo.play().catch(err => console.log('Error playing video:', err));
                        
                        // Change button text and re-enable it
                        previewBtn.disabled = false;
                        previewBtn.innerHTML = '<i class="fas fa-times me-1"></i>Close Preview';
                    });
                    
                    // Handle errors
                    previewVideo.addEventListener('error', function() {
                        console.error('Error loading video preview');
                        previewBtn.disabled = false;
                        previewBtn.innerHTML = originalBtnText;
                        alert('Error loading video preview. Please try again.');
                    });
                    
                    // Load the video
                    previewVideo.load();
                } else {
                    // Hide and pause the video
                    previewContainer.style.display = 'none';
                    if (previewVideo) {
                        previewVideo.pause();
                        previewVideo.currentTime = 0;
                    }
                    
                    // Change button text back
                    previewBtn.innerHTML = '<i class="fas fa-play me-1"></i>Preview';
                }
            }
        });
        
        // Handle create clip buttons in shorts preview
        document.addEventListener('click', function(e) {
            const createClipBtn = e.target.closest('.create-clip-btn');
            if (createClipBtn) {
                e.preventDefault();
                
                createClipBtn.disabled = true;
                const originalBtnText = createClipBtn.innerHTML;
                createClipBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>Creating...';
                
                const videoPath = createClipBtn.getAttribute('data-video-path');
                const startTime = parseFloat(createClipBtn.getAttribute('data-start'));
                const endTime = parseFloat(createClipBtn.getAttribute('data-end'));
                const title = createClipBtn.getAttribute('data-title');
                const errorMessage = document.getElementById('errorMessage');
                const resultCard = document.getElementById('resultCard');
                
                // Create clip using the API
                fetch('/api/shorts/create-clip', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ 
                        videoPath: videoPath,
                        startTime: startTime,
                        endTime: endTime,
                        title: title
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (!data.success) {
                        throw new Error(data.errorMessage || 'Failed to create clip');
                    }
                    
                    // Show success notification
                    const notification = document.createElement('div');
                    notification.className = 'alert alert-success mt-3';
                    notification.innerHTML = `
                        <div class="d-flex align-items-center">
                            <i class="fas fa-check-circle me-3 fs-4"></i>
                            <div>
                                <p class="mb-1"><strong>Clip Created Successfully!</strong></p>
                                <p class="mb-0">Your clip has been saved and is ready to <a href="${data.previewUrl}" target="_blank">preview</a> or <a href="${data.downloadUrl}" download>download</a>.</p>
                            </div>
                        </div>
                    `;
                    
                    // Add notification below the preview
                    const momentId = createClipBtn.getAttribute('data-id');
                    const previewContainer = document.getElementById(`preview-container-${momentId}`);
                    
                    // If preview container is visible, add it there
                    if (previewContainer && previewContainer.style.display !== 'none') {
                        previewContainer.appendChild(notification);
                    } else {
                        // Otherwise find the list item containing this button
                        const listItem = createClipBtn.closest('.list-group-item');
                        listItem.appendChild(notification);
                    }
                    
                    // Add to the generated clips section if it exists
                    let generatedShortsList = document.getElementById('generatedShortsList');
                    let generatedShortsContainer = document.getElementById('generatedShortsContainer');
                    
                    if (!generatedShortsList) {
                        generatedShortsContainer = document.createElement('div');
                        generatedShortsContainer.id = 'generatedShortsContainer';
                        generatedShortsContainer.className = 'mt-4';
                        generatedShortsContainer.innerHTML = `
                            <h5>Generated Videos:</h5>
                            <div class="list-group mb-3" id="generatedShortsList"></div>
                        `;
                        document.getElementById('shortsResultContainer').appendChild(generatedShortsContainer);
                        generatedShortsList = document.getElementById('generatedShortsList');
                    }
                    
                    if (generatedShortsContainer) {
                        generatedShortsContainer.classList.remove('d-none');
                    }
                    
                    // Add clip to the generated list
                    const clipElement = document.createElement('div');
                    clipElement.className = 'list-group-item list-group-item-action';
                    clipElement.innerHTML = `
                        <div class="d-flex w-100 justify-content-between align-items-center mb-3">
                            <div class="d-flex align-items-center">
                                <img src="${data.thumbnailUrl}" class="img-thumbnail me-3" style="width: 80px; height: 80px;">
                                <div>
                                    <h6 class="mb-1">${data.title}</h6>
                                    <p class="mb-1"><small>Duration: ${data.duration}</small></p>
                                </div>
                            </div>
                            <div>
                                <button class="btn btn-sm btn-outline-success me-2 play-video-btn" data-id="clip-${Date.now()}" data-url="${data.previewUrl}">
                                    <i class="fas fa-play me-1"></i>Play
                                </button>
                                <a href="${data.previewUrl}" class="btn btn-sm btn-outline-success me-2" target="_blank">
                                    <i class="fas fa-external-link-alt me-1"></i>Preview
                                </a>
                                <a href="${data.downloadUrl}" class="btn btn-sm btn-outline-primary me-2" download>
                                    <i class="fas fa-download me-1"></i>Download
                                </a>
                            </div>
                        </div>
                        <div id="video-container-clip-${Date.now()}" class="video-container mt-3" style="display: none;">
                            <div class="ratio ratio-16x9">
                                <video id="video-clip-${Date.now()}" controls>
                                    <source src="${data.previewUrl}" type="video/mp4">
                                    Your browser does not support the video tag.
                                </video>
                            </div>
                        </div>
                    `;
                    
                    generatedShortsList.appendChild(clipElement);
                    
                    // Scroll to the generated clips section if it's newly created
                    if (generatedShortsContainer) {
                        generatedShortsContainer.scrollIntoView({ behavior: 'smooth' });
                    }
                })
                .catch(error => {
                    // Show error message
                    errorMessage.textContent = error.message || "An error occurred while creating the clip.";
                    errorMessage.classList.remove('d-none');
                    resultCard.classList.remove('d-none');
                })
                .finally(() => {
                    // Re-enable button and restore text
                    createClipBtn.disabled = false;
                    createClipBtn.innerHTML = originalBtnText;
                });
            }
        });
    </script>
}
